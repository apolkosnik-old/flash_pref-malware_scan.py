#!/usr/bin/env python
"""
#===================================================================
#
# FILE: flash_pref-malware_scan.py
#
# 
# DESCRIPTION: This script is used for listing and 
#	submitting urls that have been created under the 
#	flash player preferences folder while browsing
#	with Firefox. 
#	
#	The url list is submitted to VirusTotal.com
#	public API to check each of the urls if they are 
#	known as a "Malware site"
#	against diffrent antivirus vendors. 
#	You must have a virustotal.com
#	account and a public API key to use this program.
#
# BUGS: not yet configured for windows xp, vista, 7.
#		While using linux, multiple flags not configured yet.
# NOTES: Coded using Python 2.6.1 on OSX 10.6 and bt5
# AUTHOR: Alejandro Laboy - alejandro[AT]vliot.com
# CREATED: 7/23/11
# 
#====================================================================
"""
import sys
import os
import getopt
import re
import string
import json
import urllib
import urllib2
import time
from pprint import pprint
from cStringIO import StringIO
"""
"""
apikey = 'YOUR API KEY FROM VIRUSTOTAL'
x = os.uname()
a = list(x)
aa = '[*] Platform: {0.platform}\n'.format(sys)
def usage():
		print """
Usage: flash_pref-malware_scan.py  <options>
		 
Options:
	-v 	verbose  mode. Prints all
		the results from the diffrent AV vendors.
		
	-h	--help     	This help message.
	
	-p 	--path	Path to Flash Player (sys) folder
				
				Ex: /media/disk/Documents\ and\ Settings/Administrator/Application\ Data/Macromedia/Flash_Player/macromedia.com/support/flashplayer/sys/
				
				Ex: /Users/{username}/Library/Preferences/Macromedia/Flash Player/macromedia.com/support/flashplayer/sys/
				
"""

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hp:v", ["help", "path"])
    except getopt.GetoptError, err:
	print str(err) 	
        usage()
        sys.exit(2)
    global verbose
    verbose = 1
    global filename
    filename = 1 
    global user_path
    for o, a in opts:
        if o == "-v":
	   if verbose:
		verbose = 0
		return verbose
	elif o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-p", "--path"):
		filename = 0
		user_path= sys.argv[-1]
		lo = os.listdir(user_path)
		if 'settings.sol' in lo:
			return user_path
		else:
			print user_path, "is not a flash player sys folder"
		usage()
		sys.exit(0)
        else:
            assert False, "unhandled option"
  
if __name__ == "__main__":
    main()	

def regie(rx):
	print "[!] Found Malware flags from the following vendors: \n"
	o = re.findall('\w+.":\s\"Malware site\"', rx)
	p = list(o)
	for i in p:
	  print i
	print '\n'

def cnt(lista):
	for idx,item in enumerate(lista):
		return idx, item
	
def get_verbose(ruta):
	cn=0
	l = os.listdir(ruta) #l = os.listdir(ruta2)
	l.remove('settings.sol')
	print "[*] Printing list of found urls: ",l
	print l
	exit(0)
	for urlss in os.listdir(ruta):
		urlsss=re.sub(r'[^\w\-\.]', ' ', urlss)
		b = urlsss.replace('settings.sol', '')
		url = "https://www.virustotal.com/api/get_url_report.json"
		parameters = {"resource": ""+ b + "", "key": ""+apikey+""}
		data = urllib.urlencode(parameters)
		req = urllib2.Request(url, data)
		response = urllib2.urlopen(req)
		jsonn = response.read()
		m = re.search('(?<=Mal)ware\ssite', jsonn)
		cn += 1
		print "[*] Scanning right now url:"+b+"\n"
		if m == None:
			print "[-] No Malware found for this url: "+b+"\n"
		else:	
			n = m.group()
			if n == 'ware site':
				regie(jsonn)
				print '\n'
			else:
				print "[-] No Malware found in this url: "+b+"\n"	
	if cn == 18:
		print "[-] sleeping for 5 minutes to continue submitting the rest of the urls (virustotal API rules) ..."
		time.sleep(300)
	print "[*] End of urls reached\n URLS scanned: ", cn+1		
	print "\n will now exit."
	sys.exit()

def regular_out(ruta):
	cn = 0 
	for urlss in os.listdir(ruta):
		urlsss=re.sub(r'[^\w\-\.]', ' ', urlss)
		b = urlsss.replace('settings.sol', '')
		"""
		SOME CODE USED FROM:
		http://www.virustotal.com/advanced.html#publicapi
		"""
		url = "https://www.virustotal.com/api/get_url_report.json"
		parameters = {"resource": ""+ b + "", "key": ""+apikey+""}
		data = urllib.urlencode(parameters)
		req = urllib2.Request(url, data)
		response = urllib2.urlopen(req)
		jsonn = response.read()
		m = re.search('(?<=Mal)ware\ssite', jsonn)
		cn += 1
		if m == None:
			print "[*] Url: "+b+" is not flagged. \n"
		elif m == ' ':
			print "now on the invisible file..........."	
		else:	
			n = m.group()
			if n == 'ware site':
				print "[*] The url "+b+"\n IS flagged as a (Malware site) \n"
			else:
				print "[-] \t"+b+" is not flagged as a (Malware site). \n"
	#COUNTER
	if cn == 18:
		print "[-] sleeping for 5 minutes to continue submitting the rest of the urls (virustotal API rules) ..."
		time.sleep(300)
	print "[*] End of urls reached\n URLS scanned: ", cn+1
	print "\n will now exit."
	sys.exit()
	
def lin_os(pathh):
	for urlss in os.listdir(pathh):
		urlsss=re.sub(r'[^\w\-\.]', ' ', urlss)
		b = urlsss.replace('settings.sol', ' ')
		if (verbose == 0):
			print "[*] Getting detections from virusatotal.com API ...\n"
			print "[*] Printing in verbose mode"
			print pathh
			exit(0)
			get_verbose(pathh)
			
		elif (verbose == 1): 
			print "[*] Getting detections from virusatotal.com API ...\n"
			regular_out(pathh)
			
def mac_os(ruta1):
	for urlss in os.listdir(ruta1):
		urlsss=re.sub(r'[^\w\-\.]', ' ', urlss)
		b = urlsss.replace('settings.sol', ' ')
		if (verbose == 0):
			print "[*] Getting detections from virusatotal.com API ...\n"
			print "[*] Printing in verbose mode"
			cn = 0
			l = os.listdir(ruta1)
			l.remove('settings.sol')
			def lst():
				for i in l:
					print i
					
 			print "[*] Printing list of found urls: ",lst()
 	
 			for urlss in os.listdir(ruta1):
 				urlsss=re.sub(r'[^\w\-\.]', ' ', urlss)
 				b = urlsss.replace('settings.sol', '')
 				url = "https://www.virustotal.com/api/get_url_report.json"
 				parameters = {"resource": ""+ b + "", "key": ""+apikey+""}
 				data = urllib.urlencode(parameters)
				req = urllib2.Request(url, data)
				response = urllib2.urlopen(req)
				jsonn = response.read()
				m = re.search('(?<=Mal)ware\ssite', jsonn)
				cn += 1
				print "[*] Scanning right now url:"+b+"\n"
				if m == None:
					print "[-] No Malware found for this url: "+b+"\n"
				else:	
					n = m.group()
					if n == 'ware site':
						regie(jsonn)
						print '\n'
					else:
						print "[-] No Malware found in this url: "+b+"\n"	
					print "NUMBER: ",cn
				if cn == 18:
					print "[-] sleeping for 5 minutes to continue submitting the rest of the urls (virustotal API rules) ..."
					time.sleep(300)
			print "[*] End of urls reached\n URLS scanned: ", cn+1		
			print "\n will now exit."
			sys.exit()	
		
		if (verbose == 1): 
			print "[*] Getting detections from virusatotal.com API ...\n"
		 	cn = 0 
		 	for urlss in os.listdir(ruta1):
				urlsss=re.sub(r'[^\w\-\.]', ' ', urlss)
				b = urlsss.replace('settings.sol', '')
				"""
				SOME CODE USED FROM:
				http://www.virustotal.com/advanced.html#publicapi
				"""
				url = "https://www.virustotal.com/api/get_url_report.json"
				parameters = {"resource": ""+ b + "", "key": ""+apikey+""}
				data = urllib.urlencode(parameters)
				req = urllib2.Request(url, data)
				response = urllib2.urlopen(req)
				jsonn = response.read()
				m = re.search('(?<=Mal)ware\ssite', jsonn)
				cn += 1
				#print "[*] Scanning right now url:"+b+"\n"
				if m == None:
					print "[*] Url: "+b+" is not flagged. \n"
				elif m == []:
					print "now on the invisible file..........."
					sys.exit(1)
				else:	
					n = m.group()
					if n == 'ware site':
						print "[*] The url "+b+"\n IS flagged as a (Malware site) \n"
					else:
						print "[-] \t"+b+" is not flagged as a (Malware site). \n"
				if cn == 18:
					print "[-] sleeping for 5 minutes to continue submitting the rest of the urls (virustotal API rules) ..."
					time.sleep(300)
		print "[*] End of urls reached\n URLS scanned: ", cn+1
		print "\n will now exit."
		sys.exit()

if x[-5] == 'Darwin':
		print "[*] Macintosh OS detected..."
		print aa
		name=os.getlogin()
		ruta1='/Users/'+name+'/Library/Preferences/Macromedia/Flash Player/macromedia.com/support/flashplayer/sys/'
		if filename == 0:
			mac_os(user_path)
		if filename == 1:	
			mac_os(ruta2)
		
if a[-5] == 'Linux':
		#backtrack 5 live cd
		print "[*] linux OS detected..."
		print aa
		print "[*] Enumerating urls from path ..."
		ruta2='/pentest/web/mantra/data/.macromedia/Flash_Player/macromedia.com/support/flashplayer/sys/'	
		if filename == 0:
			lin_os(user_path)
		if filename == 1:	
			lin_os(ruta2)
			